-- Função que cria clientes

DROP FUNCTION IF EXISTS popular_clientes(integer);

CREATE OR REPLACE FUNCTION popular_clientes(qtd INT)
RETURNS void AS $$
DECLARE
    nomes TEXT[] := ARRAY['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gustavo', 'Helena', 'Igor', 'Julia'];
    sobrenomes TEXT[] := ARRAY['Silva', 'Souza', 'Oliveira', 'Pereira', 'Costa', 'Rodrigues', 'Almeida', 'Nunes', 'Martins', 'Barbosa'];
    enderecos TEXT[][] := ARRAY[
        ARRAY['Rua Nove de Julho', 'Centro', '13560-042'],
        ARRAY['Rua Episcopal', 'Centro', '13560-049'],
        ARRAY['Avenida São Carlos', 'Centro', '13560-001'],
        ARRAY['Rua Conde do Pinhal', 'Jardim São Carlos', '13560-648'],
        ARRAY['Rua Riachuelo', 'Centro', '13560-110'],
        ARRAY['Rua Sete de Setembro', 'Centro', '13560-180'],
        ARRAY['Avenida Teixeira de Barros', 'Vila Prado', '13574-033'],
        ARRAY['Avenida Sallum', 'Vila Prado', '13574-040'],
        ARRAY['Rua Quintino Bocaiúva', 'Vila Boa Vista', '13574-003'],
        ARRAY['Rua Marechal Deodoro', 'Centro', '13560-200'],
        ARRAY['Rua Monteiro Lobato', 'Jardim Brasil', '13569-290'],
        ARRAY['Rua Germano Fehr', 'Vila Faria', '13569-005'],
        ARRAY['Rua Francisco Ferreira', 'Vila Faria', '13569-004'],
        ARRAY['Rua Abel Giongo', 'Vila Faria', '13569-003'],
        ARRAY['Rua Victório Bonucci', 'Jardim Tangará', '13568-110']
    ];
    i INT;
    nome_completo TEXT;
    endereco_idx INT;
    telefone TEXT;
BEGIN
    FOR i IN 1..qtd LOOP
        nome_completo := nomes[1 + floor(random() * array_length(nomes, 1))::int] || ' ' ||
                         sobrenomes[1 + floor(random() * array_length(sobrenomes, 1))::int];
        endereco_idx := 1 + floor(random() * array_length(enderecos, 1))::int;
        telefone := '1' || lpad((trunc(random() * 1000000000)::int)::text, 10, '0');

        INSERT INTO gerenciador_de_clientes_cliente (nome, telefone, cep, logradouro, numero, complemento, bairro)
        VALUES (
            nome_completo,
            telefone,
            replace(enderecos[endereco_idx][3], '-', ''),
            enderecos[endereco_idx][1],
            (100 + floor(random() * 900))::int,
            NULL,
            enderecos[endereco_idx][2]
        );
    END LOOP;
END;
$$ LANGUAGE plpgsql;

--Função que cria funcionários

DROP FUNCTION IF EXISTS popular_funcionarios(integer);

CREATE OR REPLACE FUNCTION popular_funcionarios(qtd INT)
RETURNS void AS $$
DECLARE
    nomes TEXT[] := ARRAY['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gustavo', 'Helena', 'Igor', 'Julia'];
    sobrenomes TEXT[] := ARRAY['Silva', 'Souza', 'Oliveira', 'Pereira', 'Costa', 'Rodrigues', 'Almeida', 'Nunes', 'Martins', 'Barbosa'];
    i INT;
    nome_completo TEXT;
    cpf_base TEXT;
    cpf_formatado TEXT;
    email TEXT;
    usuario TEXT;
BEGIN
    FOR i IN 1..qtd LOOP
        nome_completo := nomes[1 + floor(random() * array_length(nomes, 1))::int] || ' ' ||
                         sobrenomes[1 + floor(random() * array_length(sobrenomes, 1))::int];

        -- Gera CPF formatado
        cpf_base := lpad(floor(random() * 1000000000)::text, 9, '0') || lpad(floor(random() * 100)::text, 2, '0');
        cpf_formatado := substring(cpf_base from 1 for 3) || '.' ||
                         substring(cpf_base from 4 for 3) || '.' ||
                         substring(cpf_base from 7 for 3) || '-' ||
                         substring(cpf_base from 10 for 2);

        email := lower(replace(nome_completo, ' ', '.')) || i || '@empresa.com';
        usuario := lower(replace(nome_completo, ' ', '')) || i;

        INSERT INTO gerenciador_de_funcionarios_funcionario (nome, cpf, email, usuario, senha)
        VALUES (
            nome_completo,
            cpf_formatado,
            email,
            usuario,
            'senha123'
        );
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Função para popular tabela de produtos
DROP FUNCTION IF EXISTS popular_produtos();

CREATE OR REPLACE FUNCTION popular_produtos()
RETURNS void AS $$
DECLARE
    sabores TEXT[] := ARRAY[
        'Mussarela',
        'Calabresa',
        'Frango com Catupiry',
        'Portuguesa',
        'Marguerita',
        'Quatro Queijos',
        'Atum',
        'Bacon',
        'Brócolis',
        'Napolitana'
    ];
    i INT;
    preco NUMERIC(10,2);
BEGIN
    FOR i IN 1..array_length(sabores, 1) LOOP
        preco := round((25 + random() * 20)::numeric, 2); -- Corrigido aqui

        INSERT INTO gerenciador_de_produtos_produto (nome, preco)
        VALUES (
            sabores[i],
            preco
        ) ON CONFLICT DO NOTHING;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

